#!/bin/bash

set -ex

fast_build=false

while getopts ":o:s:d:f" opt; do
    case $opt in
        o)
            output_dir=$OPTARG
            ;;
        s)
            sdk_version=$OPTARG
            ;;
        d)
            sdk_distro=$OPTARG
            ;;
        f)
            fast_build=true
            ;;
        \?)
            echo "Invalid option: -$OPTARG" >&2
            exit 1
            ;;
        :)
            echo "Invalid option: $OPTARG requires an argument" >&2
            exit
            ;;
    esac
done

if [ -z "$output_dir" ]; then
    echo "Build output directory must be specified via -o" >&2
    exit 1
fi

if [ -z "$sdk_version" ]; then
    echo "SDK version must be specified via -s" >&2
    exit 1
fi

if [ -z "$sdk_distro" ]; then
    echo "SDK distrobution must be specified via -d" >&2
    exit 1
fi

package_dir=packages/$sdk_distro/
rm -rf $package_dir
mkdir -p $package_dir

distro_specific=distro-sdk/$sdk_distro
source $distro_specific/distro.sh

copy_distro_specific
cp -r sdk-files/* $sdk_output


while read line; do
    array=($line)
    location=${array[0]}
    src=${array[1]}
    dest=${array[2]}
    exclusions=("${array[@]:3}")

    exclusion_args=()
    i=0
    for e in "${exclusions[@]}"
    do
        exclusion_args[$i]=--exclude=$e
        ((++i))
    done

    mkdir -p $(dirname $sdk_output/$dest)
    case $location in
        OUTPUT)
            src_dir=$output_dir
            ;;
        REPO)
            src_dir=".."
            ;;
        *)
            echo "Invalid source location: $location" >&2
            exit 1
            ;;
    esac
    rsync -av --exclude='*~' "${exclusion_args[@]}" --exclude=.git --exclude=build \
          $src_dir/$src $sdk_output/$dest

done < sdk-files.txt


build_package
