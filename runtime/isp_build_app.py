import isp_build
import os
import shutil
import argparse
import isp_utils

def clean_build(source_dir, output_dir, runtime):
    isp_utils.removeIfExists(os.path.join(output_dir, "build"))
    isp_utils.removeIfExists(os.path.join(output_dir, "Makefile.ispbuild"))
    isp_utils.removeIfExists(os.path.join(source_dir, runtime + ".c"))
    isp_utils.removeIfExists(os.path.join(source_dir, "mem.h"))
    isp_utils.removeIfExists(os.path.join(source_dir, "test.h"))
    for f in os.listdir(source_dir):
        if os.path.splitext(f)[-1] == ".o":
            isp_utils.removeIfExists(os.path.join(source_dir, f))

def main():
    parser = argparse.ArgumentParser(description="Build standalone ISP applications")
    parser.add_argument("source_dir", type=str, help='''
    Directory containing the C code to be run. The "main" function
    of the C code should be named "isp_main" so that it can be found by the
    runtime/OS running on the processor.
    ''')
    parser.add_argument("-r", "--runtime", type=str, default="hifive", help='''
    Currently supported: frtos, hifive (bare metal) (default)
    ''')
    parser.add_argument("-o", "--output", type=str, default=".", help='''
    Default is current working directory.
    Location of output directory. Structure will look as follows:
    out_dir
      Makefile
      (srcs)
      build
        binary
        Makefile
    ''')
    parser.add_argument("-c", "--clean", action="store_true", help='''
    Remove all artifacts generated by this script
    ''')

    args = parser.parse_args()
    source_dir = os.path.join(args.source_dir, "srcs")

    if args.clean is True:
        clean_build(source_dir, args.output, args.runtime)
        return

    result = isp_build.do_build(source_dir,
                                isp_utils.getTemplatesDir(),
                                args.runtime,
                                args.output,
                                True)
    if result is not isp_build.retVals.SUCCESS:
        print("Failed to build application: {}".format(result))


if __name__ == "__main__":
    main()
